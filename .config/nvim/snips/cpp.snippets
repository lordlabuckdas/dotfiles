snippet tpl "cp template" bw
#include "bits/stdc++.h"
#define SYNC std::ios_base::sync_with_stdio(0);cin.tie(NULL)
using namespace std;

int main() {
	SYNC;
	$0
	return 0;
}
endsnippet

snippet wt "while(t--)"
while(${1:t}}--) {
	$0
}
endsnippet

snippet trn "ternary operator"
${1:condition}:${2:true}:${3:true};
endsnippet

snippet sp "space"
<< " " <<
endsnippet

snippet nl "newline"
<< "\n" <<
endsnippet

snippet sieve "sieve of eratosthenes"
bool prime[1000007];

void sieve(long long n) {
	memset(prime, true, (n + 1)*sizeof(bool));
	prime[0] = prime[1] = false;
	for (long long p = 2; p * p <= n; p++) {
		if (prime[p] == true) {
			for (long long i = p * p; i <= n; i += p)
				prime[i] = false;
		}
	}
}
endsnippet

snippet bs "binary search"
long long low = ${1:0}, high = ${2:n - 1}, mid;
while (low <= high) {
	mid = (low + high) / 2;
	if (${3:a}[mid] < ${4:x}) {
		low = mid + 1;
	}
	else if (${3:a}[mid] == ${4:x}) {
		$0
	}
	else {
		high = mid - 1;
	}
}
endsnippet

snippet lc "leetcode template" bw
#include "bits/stdc++.h"
using namespace std;

class Solution {
	public:
		$2 roll($1);
};

$2 Solution::roll($1) {
	// int n = A.size();
	// int m = A[0].size();
	$2 $4;
	$0
	return $4;
}

int main() {
	Solution rick = Solution();
	$1;
	$2 op = rick.roll();
	// cout<<op;
	// for(auto i: op) {
	// 	cout<<i<<" ";
	// }
	// for(auto i: op) {
	// 	for(auto j: i)
	// 		cout<<j<<" ";
	// 	cout<<"\n";
	// }
	return 0;
}
endsnippet

snippet lili "linked list functions" bw
class ListNode {
public:
	int val;
	ListNode *next;
	ListNode(): val(0), next(NULL) {}
	ListNode(int x): val(x), next(NULL) {}
};

ListNode* llStarter() {
	ListNode *head = NULL;
	ListNode *tmp = new ListNode();
	head = tmp;
	tmp->val = 1;
	tmp->next = NULL;
	ListNode *prev = tmp;
	for(int i=2;i<7;i++) {
		tmp = new ListNode();
		tmp->val = i;
		tmp->next = NULL;
		prev->next = tmp;
		prev = tmp;
	}
	return head;
}

void printLL(ListNode *head) {
	ListNode *tmp = head;
	while(tmp!=NULL) {
		cout<<tmp->val<<"-->";
		tmp=tmp->next;
	}
}

ListNode* revLL(ListNode *start) {
	ListNode *curr = start, *prev = NULL, *next = NULL;
	while(curr) {
		next = curr->next;
		curr->next = prev;
		prev = curr;
		curr = next;
	}
	return prev;
}

ListNode* midLL(ListNode *head) {
	ListNode *fast = head, *slow = head;
	while(fast!=NULL && fast->next!=NULL && fast->next->next!NULL) {
		fast = fast->next->next;
		slow = slow->next;
	}
	return slow;
}

endsnippet

snippet comb "nCr" bw

long ncr(int n,int r)
{
	long ans=1;
	r=r>n-r?n-r:r;
	int j=1;
	for(;j<=r;j++,n--)
	{
		if(n%j==0) {
			ans*=n/j;
		} else if(ans%j==0) {
			ans=ans/j*n;
		} else {
			ans=(ans*n)/j;
		}
	}
	return ans;
}

endsnippet
